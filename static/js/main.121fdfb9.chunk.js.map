{"version":3,"sources":["types/app.ts","types/index.ts","components/app/SideBar.tsx","components/shared/BaseLayout.tsx","api/client/endpoints/shared/base.ts","api/client/endpoints/crew.ts","api/client/endpoints/company.ts","api/client/endpoints/capsules.ts","api/client/endpoints/rockets.ts","api/client/http/index.ts","api/client/index.ts","store/features/errors/errorsSlice.ts","store/features/companyDetailsSlice.ts","store/features/crewListSlice.ts","store/features/crewReadSlice.ts","store/features/capsulesListSlice.ts","store/features/rocketsListSlice.ts","store/features/rocketReadSlice.ts","components/pages/CapsulesList.tsx","components/pages/CrewList.tsx","components/pages/CrewRead.tsx","components/pages/HomePage.tsx","components/pages/RocketsList.tsx","components/pages/RocketRead.tsx","components/app/providers/Router.tsx","store/index.ts","components/app/providers/Store.tsx","components/app/App.tsx","index.tsx"],"names":["HOST","API_ENDPOINT","APP_ENDPOINT","HTTP_METHOD","SideBar","Sider","style","paddingTop","theme","mode","Item","icon","BarsOutlined","to","HOME","AndroidOutlined","CAPSULES","RocketOutlined","ROCKETS","TeamOutlined","CREW","Header","Layout","Content","Footer","StyledHeader","styled","StyledLayout","StyledContent","StyledDiv","div","padding","minHeight","StyledFooter","BaseLayout","props","className","children","BaseEndpoint","client","path","id","this","get","CrewEndpoint","CompanyEndpoint","COMPANY","CapsulesEndpoint","RocketsEndpoint","HttpClient","api","API","endpoint","parameters","Axios","params","getRequestConfig","then","data","catch","error","console","GET","headers","ApiClient","company","crew","capsules","rockets","instance","errorsSlice","createSlice","name","initialState","reducers","pushErrorAction","state","action","push","payload","showed","uuid","setErrorShowed","find","actions","defaultState","loading","companyDetailsSlice","loadingCompanyAction","isLoading","errorCompanyAction","message","setCompanyDetailsData","crewListSlice","loadingCrewListAction","errorCrewListAction","setCrewListData","crewReadSlice","loadingCrewReadAction","errorCrewReadAction","setCrewReadData","capsulesListSlice","loadingCapsulesListAction","errorCapsulesListAction","setCapsulesListData","rocketsListSlice","loadingRocketsListAction","errorRocketsListAction","setRocketsListData","rocketReadSlice","loadingRocketReadAction","errorRocketReadAction","setRocketReadData","Title","Typography","CapsulesListPage","dispatch","useDispatch","useSelector","store","capsulesList","useEffect","a","factory","list","title","rowKey","dataSource","size","bordered","Column","dataIndex","align","render","renderStatus","status","toLowerCase","color","toUpperCase","Meta","Card","CrewListPage","crewList","gutter","justify","map","span","width","margin","hoverable","cover","alt","src","image","maxHeight","CrewReadPage","useParams","crewMember","crewRead","read","fetchCrewReadThunk","height","bodyStyle","column","label","labelStyle","fontWeight","text","agency","launches","type","href","wikipedia","target","LinkOutlined","HomePage","companyDetails","Object","keys","key","index","key1","RocketsListPage","rocketsList","rocket","minWidth","flickr_images","Math","floor","random","length","RocketReadPage","rocketRead","fetchRocketReadThunk","effect","autoplay","pic","description","active","toString","first_flight","country","cost_per_launch","boosters","stages","diameter","mass","AppRouterProvider","exact","component","configureStore","reducer","combineReducers","AppStoreProvider","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.121fdfb9.chunk.js","sourcesContent":["import { Action, ThunkAction } from '@reduxjs/toolkit'\nimport { ICompany } from './company'\nimport { ICrew } from './crew'\nimport { ICapsule } from './capsules'\nimport { IRocket } from './rockets'\n\nexport enum HOST {\n  API = 'https://api.spacexdata.com/v4'\n}\n\nexport enum API_ENDPOINT {\n  COMPANY = 'company',\n  CAPSULES= 'capsules',\n  ROCKETS = 'rockets',\n  CREW = 'crew'\n}\n\nexport enum APP_ENDPOINT {\n  HOME = '/',\n  CAPSULES= '/capsules',\n  ROCKETS = '/rockets',\n  CREW = '/crew'\n}\n\nexport enum HTTP_METHOD {\n  POST = 'post',\n  GET = 'get',\n  PUT = 'put',\n  DELETE = 'delete',\n  PATCH = 'patch'\n}\n\nexport interface IHttpClient {\n  get<Output, Input = Record<string, unknown>>(path: string, payload?: Input): ApiResponse<Output>\n}\n\nexport type ApiResponse<T> = Promise<T>\n\nexport type IThunk = ThunkAction<void, IRootStore, unknown, Action<string>>\n\nexport interface IDataStore<T> {\n  loading: boolean\n  error: null | string\n  data: T | null\n}\n\nexport interface IRootStore {\n  companyDetails: IDataStore<ICompany>\n  crewList: IDataStore<ICrew[]>\n  crewRead: IDataStore<ICrew>\n  capsulesList: IDataStore<ICapsule>\n  rocketsList: IDataStore<IRocket[]>\n  rocketRead: IDataStore<IRocket>\n}","export * from './app'\nexport * from './company'\nexport * from './error'\nexport * from './crew'\nexport * from './capsules'\nexport * from './rockets'","import React from 'react'\nimport { Menu } from 'antd'\nimport { AndroidOutlined, BarsOutlined, RocketOutlined, TeamOutlined } from '@ant-design/icons'\nimport Sider from 'antd/es/layout/Sider'\nimport { Link } from 'react-router-dom'\nimport { APP_ENDPOINT } from '../../types'\n\nexport const SideBar: React.FC = () => {\n  return (\n    <Sider style={{ paddingTop: '8vh' }}>\n      <Menu theme=\"dark\" mode=\"inline\">\n        <Menu.Item key=\"1\" icon={<BarsOutlined />}>\n          <Link to={APP_ENDPOINT.HOME}>Company Info</Link>\n        </Menu.Item>\n        <Menu.Item key=\"2\" icon={<AndroidOutlined />}>\n          <Link to={APP_ENDPOINT.CAPSULES}>Capsules</Link>\n        </Menu.Item>\n        <Menu.Item key=\"3\" icon={<RocketOutlined />}>\n          <Link to={APP_ENDPOINT.ROCKETS}>Rockets</Link>\n        </Menu.Item>\n        <Menu.Item key=\"4\" icon={<TeamOutlined />}>\n          <Link to={APP_ENDPOINT.CREW}>Crew</Link>\n        </Menu.Item>\n      </Menu>\n    </Sider>\n  )\n}\n","import React from 'react'\nimport { Layout } from 'antd'\nimport 'antd/dist/antd.css'\nimport styled from '@emotion/styled'\nimport { SideBar } from '../app/SideBar'\n\nconst { Header, Content, Footer } = Layout\n\nconst StyledHeader = styled(Header)`\n  font-size: 20px;\n  color: white;\n  padding: 0 10px;\n`\n\nconst StyledLayout = styled(Layout)`\n  min-height: 100vh;\n`\n\nconst StyledContent = styled(Content)`\n  margin: 0 16px;\n`\n\nconst StyledDiv = styled.div({\n  padding: 24,\n  minHeight: 360\n})\n\nconst StyledFooter = styled(Footer)`\n  text-align: center;\n`\n\nexport const BaseLayout: React.FC = (props) => {\n  return (\n    <StyledLayout>\n      <SideBar />\n      <Layout className=\"site-layout\">\n        <StyledHeader className=\"site-layout-background\">SpaceX</StyledHeader>\n        <StyledContent>\n          <StyledDiv className=\"site-layout-background\">{props.children}</StyledDiv>\n        </StyledContent>\n        <StyledFooter>SpaceX created with Ant Design ©2018</StyledFooter>\n      </Layout>\n    </StyledLayout>\n  )\n}\n","import { ApiResponse, IHttpClient } from '../../../../types'\n\nexport class BaseEndpoint<T> {\n  constructor(protected readonly client: IHttpClient) {}\n\n  public read(path: string, id?: string): ApiResponse<T> {\n    return this.client.get<T>(id ? `${path}/${id}` : path)\n  }\n\n  public list(path: string): ApiResponse<T[]> {\n    return this.client.get<T[]>(path)\n  }\n}\n","import { API_ENDPOINT, ApiResponse, ICrew } from '../../../types'\nimport { BaseEndpoint } from './shared/base'\nimport { HttpClient } from '../http'\n\nexport class CrewEndpoint extends BaseEndpoint<ICrew> {\n  public path = `${API_ENDPOINT.CREW}`\n  constructor(protected readonly client: HttpClient) {\n    super(client);\n  }\n\n  list(): ApiResponse<ICrew[]> {\n    return super.list(this.path)\n  }\n\n  read(id: string): ApiResponse<ICrew> {\n   return super.read(this.path, id)\n }\n}\n","import { API_ENDPOINT, ApiResponse, ICompany, IHttpClient } from '../../../types'\nimport { BaseEndpoint } from './shared/base'\n\nexport class CompanyEndpoint extends BaseEndpoint<ICompany>{\n  public path = `${API_ENDPOINT.COMPANY}`\n  constructor(protected readonly client: IHttpClient) {\n    super(client)\n  }\n\n  read(): ApiResponse<ICompany> {\n    return super.read(this.path)\n  }\n}\n","import { API_ENDPOINT, ApiResponse, ICapsule, IHttpClient } from '../../../types'\nimport { BaseEndpoint } from './shared/base'\n\nexport class CapsulesEndpoint extends BaseEndpoint<ICapsule>{\n  public path = `${API_ENDPOINT.CAPSULES}`\n  constructor(protected readonly client: IHttpClient) {\n    super(client)\n  }\n\n  list(): ApiResponse<ICapsule[]> {\n    return super.list(this.path)\n  }\n}\n","import { API_ENDPOINT, ApiResponse, IHttpClient, IRocket } from '../../../types'\nimport { BaseEndpoint } from './shared/base'\n\nexport class RocketsEndpoint extends BaseEndpoint<IRocket>{\n  public path = `${API_ENDPOINT.ROCKETS}`\n  constructor(protected readonly client: IHttpClient) {\n    super(client)\n  }\n\n  read(id: string): ApiResponse<IRocket> {\n    return super.read(this.path, id)\n  }\n\n  list(): ApiResponse<IRocket[]> {\n    return super.list(this.path)\n  }\n}\n","import Axios, { AxiosRequestConfig } from 'axios'\nimport { ApiResponse, HOST, HTTP_METHOD, IHttpClient } from '../../../types'\n\nexport class HttpClient implements IHttpClient {\n  protected api: string = HOST.API\n\n  public get<T>(endpoint: string, parameters?: unknown): ApiResponse<T> {\n    return Axios.get(`${this.api}/${endpoint}`, {\n      params: parameters || null,\n      ...this.getRequestConfig()\n    })\n      .then(({ data }) => data)\n      .catch((error) => console.error(error, endpoint, HTTP_METHOD.GET))\n  }\n\n  protected getRequestConfig(): AxiosRequestConfig {\n    return {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n  }\n}\n","import { CapsulesEndpoint, CompanyEndpoint, CrewEndpoint, RocketsEndpoint } from './endpoints'\nimport { HttpClient } from './http'\n\nexport class ApiClient {\n  public company: CompanyEndpoint\n  public crew: CrewEndpoint\n  public capsules: CapsulesEndpoint\n  public rockets: RocketsEndpoint\n  protected client: HttpClient\n  private static instance: ApiClient\n\n  constructor() {\n    this.client = new HttpClient()\n    this.company = new CompanyEndpoint(this.client)\n    this.crew = new CrewEndpoint(this.client)\n    this.capsules = new CapsulesEndpoint(this.client)\n    this.rockets = new RocketsEndpoint(this.client)\n  }\n\n  public static factory(): ApiClient {\n    if (!this.instance) {\n      return (ApiClient.instance = new ApiClient())\n    }\n    return ApiClient.instance\n  }\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { v4 as uuid } from 'uuid'\nimport { IError } from '../../../types'\n\nexport const errorsSlice = createSlice({\n  name: 'errors',\n  initialState: [],\n  reducers: {\n    pushErrorAction: (state: IError[], action: PayloadAction<IError>) => {\n      state.push({ ...action.payload, showed: false, id: uuid() })\n    },\n    setErrorShowed: (state: IError[], action: PayloadAction<IError>) => {\n      const error = state.find(error => error.id === action.payload.id)\n      if (!error) {\n        return\n      }\n      error!.showed = true\n    }\n  }\n})\n\nexport const { pushErrorAction, setErrorShowed } = errorsSlice.actions","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { ICompany, IDataStore, IThunk } from '../../types'\nimport { ApiClient } from '../../api/client'\nimport { pushErrorAction } from './errors/errorsSlice'\n\nconst defaultState = {\n  loading: false,\n  error: null,\n  data: null\n}\n\nexport const companyDetailsSlice = createSlice({\n  name: 'companyDetails',\n  initialState: defaultState,\n  reducers: {\n    loadingCompanyAction: (state: IDataStore<ICompany>, action: PayloadAction<{ isLoading: boolean }>) => {\n      state.loading = action.payload.isLoading\n    },\n    errorCompanyAction: (state: IDataStore<ICompany>, action: PayloadAction<{ message: string }>) => {\n      state.loading = defaultState.loading\n      state.error = action.payload.message\n    },\n    setCompanyDetailsData: (state: IDataStore<ICompany>, action: PayloadAction<{ data: ICompany }>) => {\n      state.error = defaultState.error\n      state.loading = defaultState.loading\n      state.data = action.payload.data\n    }\n  }\n})\n\nexport const { errorCompanyAction, loadingCompanyAction, setCompanyDetailsData } = companyDetailsSlice.actions\nexport const fetchCompanyDetailsThunk = (): IThunk => async (dispatch) => {\n  try {\n    dispatch(loadingCompanyAction({ isLoading: true }))\n    const client = ApiClient.factory()\n    const data = await client.company.read()\n    dispatch(setCompanyDetailsData({ data }))\n  } catch (error) {\n    dispatch(\n      pushErrorAction({\n        title: 'There was a problem fetching company details data',\n        message: 'Fetching company details data error'\n      })\n    )\n    dispatch(errorCompanyAction({ message: error.message }))\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { IDataStore, IThunk } from '../../types'\nimport { ApiClient } from '../../api/client'\nimport { pushErrorAction } from './errors/errorsSlice'\nimport { ICrew } from '../../types/crew'\n\nconst defaultState = {\n  loading: false,\n  error: null,\n  data: null\n}\n\nexport const crewListSlice = createSlice({\n  name: 'crewList',\n  initialState: defaultState,\n  reducers: {\n    loadingCrewListAction: (state: IDataStore<ICrew>, action: PayloadAction<{ isLoading: boolean }>) => {\n      state.loading = action.payload.isLoading\n    },\n    errorCrewListAction: (state: IDataStore<ICrew>, action: PayloadAction<{ message: string }>) => {\n      state.loading = defaultState.loading\n      state.error = action.payload.message\n    },\n    setCrewListData: (state: IDataStore<ICrew[]>, action: PayloadAction<{ data: ICrew[] }>) => {\n      state.error = defaultState.error\n      state.loading = defaultState.loading\n      state.data = action.payload.data\n    }\n  }\n})\n\nexport const { errorCrewListAction, loadingCrewListAction, setCrewListData } = crewListSlice.actions\nexport const fetchCrewListThunk = (): IThunk => async (dispatch) => {\n  try {\n    dispatch(loadingCrewListAction({ isLoading: true }))\n    const client = ApiClient.factory()\n    const data = await client.crew.list()\n    dispatch(setCrewListData({ data }))\n  } catch (error) {\n    dispatch(\n      pushErrorAction({\n        title: 'There was a problem fetching crew list data',\n        message: 'Fetching crew list data error'\n      })\n    )\n    dispatch(errorCrewListAction({ message: error.message }))\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { ICrew, IDataStore, IThunk } from '../../types'\nimport { ApiClient } from '../../api/client'\nimport { pushErrorAction } from './errors/errorsSlice'\n\nconst defaultState = {\n  loading: false,\n  error: null,\n  data: null\n}\n\nexport const crewReadSlice = createSlice({\n  name: 'crewRead',\n  initialState: defaultState,\n  reducers: {\n    loadingCrewReadAction: (state: IDataStore<ICrew>, action: PayloadAction<{ isLoading: boolean }>) => {\n      state.loading = action.payload.isLoading\n    },\n    errorCrewReadAction: (state: IDataStore<ICrew>, action: PayloadAction<{ message: string }>) => {\n      state.loading = defaultState.loading\n      state.error = action.payload.message\n    },\n    setCrewReadData: (state: IDataStore<ICrew>, action: PayloadAction<{ data: ICrew }>) => {\n      state.error = defaultState.error\n      state.loading = defaultState.loading\n      state.data = action.payload.data\n    }\n  }\n})\n\nexport const { errorCrewReadAction, loadingCrewReadAction, setCrewReadData } = crewReadSlice.actions\nexport const fetchCrewReadThunk = (id: string): IThunk => async (dispatch) => {\n  try {\n    dispatch(loadingCrewReadAction({ isLoading: true }))\n    const client = ApiClient.factory()\n    const data = await client.crew.read(id)\n    dispatch(setCrewReadData({ data }))\n  } catch (error) {\n    dispatch(\n      pushErrorAction({\n        title: 'There was a problem fetching crew read data',\n        message: 'Fetching crew read data error'\n      })\n    )\n    dispatch(errorCrewReadAction({ message: error.message }))\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { ICapsule, IDataStore, IThunk } from '../../types'\nimport { ApiClient } from '../../api/client'\nimport { pushErrorAction } from './errors/errorsSlice'\n\nconst defaultState = {\n  loading: false,\n  error: null,\n  data: null\n}\n\nexport const capsulesListSlice = createSlice({\n  name: 'capsulesList',\n  initialState: defaultState,\n  reducers: {\n    loadingCapsulesListAction: (state: IDataStore<ICapsule>, action: PayloadAction<{ isLoading: boolean }>) => {\n      state.loading = action.payload.isLoading\n    },\n    errorCapsulesListAction: (state: IDataStore<ICapsule>, action: PayloadAction<{ message: string }>) => {\n      state.loading = defaultState.loading\n      state.error = action.payload.message\n    },\n    setCapsulesListData: (state: IDataStore<ICapsule[]>, action: PayloadAction<{ data: ICapsule[] }>) => {\n      state.error = defaultState.error\n      state.loading = defaultState.loading\n      state.data = action.payload.data\n    }\n  }\n})\n\nexport const { errorCapsulesListAction, loadingCapsulesListAction, setCapsulesListData } = capsulesListSlice.actions\nexport const fetchCapsulesListThunk = (): IThunk => async (dispatch) => {\n  try {\n    dispatch(loadingCapsulesListAction({ isLoading: true }))\n    const client = ApiClient.factory()\n    const data: ICapsule[] = await client.capsules.list()\n    dispatch(setCapsulesListData({ data }))\n  } catch (error) {\n    dispatch(\n      pushErrorAction({\n        title: 'There was a problem fetching capsules list data',\n        message: 'Fetching capsules list data error'\n      })\n    )\n    dispatch(errorCapsulesListAction({ message: error.message }))\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { IDataStore, IRocket, IThunk } from '../../types'\nimport { ApiClient } from '../../api/client'\nimport { pushErrorAction } from './errors/errorsSlice'\n\nconst defaultState = {\n  loading: false,\n  error: null,\n  data: null\n}\n\nexport const rocketsListSlice = createSlice({\n  name: 'rocketsList',\n  initialState: defaultState,\n  reducers: {\n    loadingRocketsListAction: (state: IDataStore<IRocket>, action: PayloadAction<{ isLoading: boolean }>) => {\n      state.loading = action.payload.isLoading\n    },\n    errorRocketsListAction: (state: IDataStore<IRocket>, action: PayloadAction<{ message: string }>) => {\n      state.loading = defaultState.loading\n      state.error = action.payload.message\n    },\n    setRocketsListData: (state: IDataStore<IRocket[]>, action: PayloadAction<{ data: IRocket[] }>) => {\n      state.error = defaultState.error\n      state.loading = defaultState.loading\n      state.data = action.payload.data\n    }\n  }\n})\n\nexport const { errorRocketsListAction, loadingRocketsListAction, setRocketsListData } = rocketsListSlice.actions\nexport const fetchRocketsListThunk = (): IThunk => async (dispatch) => {\n  try {\n    dispatch(loadingRocketsListAction({ isLoading: true }))\n    const client = ApiClient.factory()\n    const data = await client.rockets.list()\n    dispatch(setRocketsListData({ data }))\n  } catch (error) {\n    dispatch(\n      pushErrorAction({\n        title: 'There was a problem fetching rockets list data',\n        message: 'Fetching rockets list data error'\n      })\n    )\n    dispatch(errorRocketsListAction({ message: error.message }))\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { IDataStore, IRocket, IThunk } from '../../types'\nimport { ApiClient } from '../../api/client'\nimport { pushErrorAction } from './errors/errorsSlice'\n\nconst defaultState = {\n  loading: false,\n  error: null,\n  data: null\n}\n\nexport const rocketReadSlice = createSlice({\n  name: 'rocketRead',\n  initialState: defaultState,\n  reducers: {\n    loadingRocketReadAction: (state: IDataStore<IRocket>, action: PayloadAction<{ isLoading: boolean }>) => {\n      state.loading = action.payload.isLoading\n    },\n    errorRocketReadAction: (state: IDataStore<IRocket>, action: PayloadAction<{ message: string }>) => {\n      state.loading = defaultState.loading\n      state.error = action.payload.message\n    },\n    setRocketReadData: (state: IDataStore<IRocket>, action: PayloadAction<{ data: IRocket }>) => {\n      state.error = defaultState.error\n      state.loading = defaultState.loading\n      state.data = action.payload.data\n    }\n  }\n})\n\nexport const { errorRocketReadAction, loadingRocketReadAction, setRocketReadData } = rocketReadSlice.actions\nexport const fetchRocketReadThunk = (id: string): IThunk => async (dispatch) => {\n  try {\n    dispatch(loadingRocketReadAction({ isLoading: true }))\n    const client = ApiClient.factory()\n    const data = await client.rockets.read(id)\n    dispatch(setRocketReadData({ data }))\n  } catch (error) {\n    dispatch(\n      pushErrorAction({\n        title: 'There was a problem fetching rocket data',\n        message: 'Fetching rocket data error'\n      })\n    )\n    dispatch(errorRocketReadAction({ message: error.message }))\n  }\n}\n","import React, { useEffect } from 'react'\nimport { BaseLayout } from '../shared/BaseLayout'\nimport { Table, Tag, Typography } from 'antd'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ICapsule, IRootStore } from '../../types'\nimport { fetchCapsulesListThunk } from '../../store/features'\n\nconst { Title } = Typography\n\nexport const CapsulesListPage: React.FC = () => {\n  const dispatch = useDispatch()\n  const data = (useSelector((store: IRootStore) => store.capsulesList.data) as unknown) as ICapsule[]\n\n  useEffect(() => {\n    if (!data) {\n      dispatch(fetchCapsulesListThunk())\n    }\n  }, [data, dispatch])\n\n  return (\n    <BaseLayout>\n      <Title>Capsules</Title>\n      {data && (\n        <Table<ICapsule> rowKey=\"id\" dataSource={data} size=\"middle\" bordered>\n          <Table.Column<ICapsule> key=\"serial\" title=\"Serial\" dataIndex=\"serial\" align=\"center\" />\n          <Table.Column<ICapsule> key=\"type\" title=\"Type\" dataIndex=\"type\" align=\"center\" />\n          <Table.Column<ICapsule> key=\"water_landings\" title=\"Water Landings\" dataIndex=\"water_landings\" align=\"center\" />\n          <Table.Column<ICapsule> key=\"land_landings\" title=\"Land Landings\" dataIndex=\"land_landings\" align=\"center\" />\n          <Table.Column<ICapsule> key=\"last_update\" title=\"Last Update\" dataIndex=\"last_update\" align=\"center\" />\n          <Table.Column<ICapsule> key=\"reuse_count\" title=\"Reuse Count\" dataIndex=\"reuse_count\" align=\"center\" />\n          <Table.Column<ICapsule> key=\"status\" title=\"Status\" dataIndex=\"status\" render={renderStatus} align=\"center\" />\n        </Table>\n      )}\n    </BaseLayout>\n  )\n}\n\nfunction renderStatus(status: string) {\n  return status.toLowerCase() === 'retired' ? (\n    <Tag color={'purple'}>{status.toUpperCase()}</Tag>\n  ) : status.toLowerCase() === 'unknown' ? (\n    <Tag color={'blue'}>{status.toUpperCase()}</Tag>\n  ) : status.toLowerCase() === 'destroyed' ? (\n    <Tag color={'red'}>{status.toUpperCase()}</Tag>\n  ) : (\n    <Tag color={'green'}>{status.toUpperCase()}</Tag>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { APP_ENDPOINT, ICrew, IRootStore } from '../../types'\nimport { fetchCrewListThunk } from '../../store/features'\nimport { Card, Col, Row, Typography } from 'antd'\nimport { BaseLayout } from '../shared/BaseLayout'\nimport { Link } from 'react-router-dom'\n\nconst { Title } = Typography\nconst { Meta } = Card\n\nexport const CrewListPage: React.FC = () => {\n  const dispatch = useDispatch()\n  const data = (useSelector((store: IRootStore) => store.crewList.data) as unknown) as Record<string, any>\n\n  useEffect(() => {\n    if (!data) {\n      dispatch(fetchCrewListThunk())\n    }\n  }, [data, dispatch])\n\n  return (\n    <BaseLayout>\n      {data && (\n        <div>\n          <Title>Crew</Title>\n          <Row gutter={[16, 16]} justify=\"center\">\n            {data.map((crew: ICrew) => (\n              <Col key={crew.id} span={8}>\n                <div style={{ width: 240, margin: '0 auto'}}>\n                  <Link to={`${APP_ENDPOINT.CREW}/${crew.id}`}>\n                    <Card hoverable cover={<img alt=\"crew\" src={`${crew.image}`} style={{ maxHeight: 300 }} />}>\n                      <Meta title={`${crew.name}`} />\n                    </Card>\n                  </Link>\n                </div>\n              </Col>\n            ))}\n          </Row>\n        </div>\n      )}\n    </BaseLayout>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { IRootStore } from '../../types'\nimport { Badge, Button, Card, Col, Descriptions, Row, Typography } from 'antd'\nimport { BaseLayout } from '../shared/BaseLayout'\nimport { useParams } from 'react-router-dom'\nimport { fetchCrewReadThunk } from '../../store/features/crewReadSlice'\nimport { LinkOutlined } from '@ant-design/icons'\n\nconst { Title } = Typography\n\nexport const CrewReadPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>()\n  const dispatch = useDispatch()\n  const crewMember = (useSelector((store: IRootStore) => store.crewRead.data) as unknown) as Record<string, any>\n\n  useEffect(() => {\n    if (!crewMember || id !== crewMember.id) {\n      dispatch(fetchCrewReadThunk(id))\n    }\n  }, [crewMember, dispatch])\n\n  return (\n    <BaseLayout>\n      {crewMember && (\n        <div>\n          <Title>{crewMember.name}</Title>\n          <Row gutter={16} justify=\"center\">\n            <Col span={12}>\n              <Card\n                style={{ width: 550 }}\n                cover={<img alt={`${crewMember.name}`} src={`${crewMember.image}`} style={{ height: 600 }} />}\n                bodyStyle={{ padding: 0 }}\n              />\n            </Col>\n            <Col span={12}>\n              <Descriptions bordered column={1}>\n                <Descriptions.Item label=\"Status\" labelStyle={{ fontWeight: 'bold' }}>\n                  {crewMember.status === 'active' ? (\n                    <Badge color=\"green\" status=\"processing\" text={crewMember.status.toUpperCase()} />\n                  ) : (\n                    <Badge color=\"red\" text={crewMember.status.toUpperCase()} />\n                  )}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"Agency\" labelStyle={{ fontWeight: 'bold' }}>\n                  {crewMember.agency}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"Launches\" labelStyle={{ fontWeight: 'bold' }}>\n                  {crewMember.launches}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"Wikipedia\" labelStyle={{ fontWeight: 'bold' }}>\n                  <Button type=\"link\" href={crewMember.wikipedia} target=\"_blank\">\n                    <LinkOutlined />\n                  </Button>\n                </Descriptions.Item>\n              </Descriptions>\n            </Col>\n          </Row>\n        </div>\n      )}\n    </BaseLayout>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { IRootStore } from '../../types'\nimport { fetchCompanyDetailsThunk } from '../../store/features'\nimport { Descriptions, Typography } from 'antd'\nimport { BaseLayout } from '../shared/BaseLayout'\n\nconst { Title } = Typography\n\nexport const HomePage: React.FC = () => {\n  const dispatch = useDispatch()\n  const data = (useSelector((store: IRootStore) => store.companyDetails.data) as unknown) as Record<string, any>\n\n  useEffect(() => {\n    if (!data) {\n      dispatch(fetchCompanyDetailsThunk())\n    }\n  }, [data, dispatch])\n\n  return (\n    <BaseLayout>\n      {data && (\n        <div>\n          <Title>Company Details</Title>\n          <Descriptions bordered column={1}>\n            {Object.keys(data).map((key: string, index: number) => (\n              <Descriptions.Item key={index} label={key} labelStyle={{ fontWeight: 'bold' }}>\n                {typeof data[key] === 'object'\n                  ? Object.keys(data[key]).map((key1) => (\n                      <div key={key1}>\n                        <p>\n                          <span style={{ fontWeight: 'bold' }}>{key1}</span>: {data[key][key1]}\n                        </p>\n                        <br />\n                      </div>\n                    ))\n                  : data[key]}\n              </Descriptions.Item>\n            ))}\n          </Descriptions>\n        </div>\n      )}\n    </BaseLayout>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { BaseLayout } from '../shared/BaseLayout'\nimport { Card, Col, Row, Typography } from 'antd'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { APP_ENDPOINT, IRocket, IRootStore } from '../../types'\nimport { Link } from 'react-router-dom'\nimport Meta from 'antd/es/card/Meta'\nimport { fetchRocketsListThunk } from '../../store/features'\n\nconst { Title } = Typography\n\nexport const RocketsListPage: React.FC = () => {\n  const dispatch = useDispatch()\n  const data = (useSelector((store: IRootStore) => store.rocketsList.data) as unknown) as IRocket[]\n\n  useEffect(() => {\n    if (!data) {\n      dispatch(fetchRocketsListThunk())\n    }\n  }, [data, dispatch])\n\n  return (\n    <BaseLayout>\n      {data && (\n        <div>\n          <Title>Rockets</Title>\n          <Row gutter={[8, 8]} justify=\"center\">\n            {data.map((rocket: IRocket) => (\n              <Col key={rocket.id} span={12}>\n                <div style={{ minWidth: 480, margin: '0 auto' }}>\n                  <Link to={`${APP_ENDPOINT.ROCKETS}/${rocket.id}`}>\n                    <Card\n                      hoverable\n                      cover={\n                        <img\n                          alt=\"rocket\"\n                          src={`${rocket.flickr_images[Math.floor(Math.random() * rocket.flickr_images.length)]}`}\n                          style={{ maxHeight: 300 }}\n                        />\n                      }\n                    >\n                      <Meta title={`${rocket.name}`} />\n                    </Card>\n                  </Link>\n                </div>\n              </Col>\n            ))}\n          </Row>\n        </div>\n      )}\n    </BaseLayout>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { IRootStore } from '../../types'\nimport { Carousel, Descriptions, Tag, Typography } from 'antd'\nimport { BaseLayout } from '../shared/BaseLayout'\nimport { useParams } from 'react-router-dom'\nimport { fetchRocketReadThunk } from '../../store/features'\n\nconst { Title } = Typography\n\nexport const RocketReadPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>()\n  const dispatch = useDispatch()\n  const rocket = (useSelector((store: IRootStore) => store.rocketRead.data) as unknown) as Record<string, any>\n\n  useEffect(() => {\n    if (!rocket || id !== rocket.id) {\n      dispatch(fetchRocketReadThunk(id))\n    }\n  }, [rocket, dispatch])\n\n  return (\n    <BaseLayout>\n      {rocket && (\n        <div>\n          <Title>{rocket.name}</Title>\n          <Carousel effect=\"fade\" autoplay>\n            {rocket.flickr_images.map((pic: string, index: number) => (\n              <div key={index}>\n                <img\n                  src={pic}\n                  alt=\"rocket\"\n                  style={{\n                    width: '50%',\n                    height: '480px',\n                    margin: '0 auto'\n                  }}\n                />\n              </div>\n            ))}\n          </Carousel>\n          <br />\n          <p>{rocket.description}</p>\n          <Descriptions bordered size=\"small\" column={3}>\n            <Descriptions.Item label=\"Name\">{rocket.name}</Descriptions.Item>\n            <Descriptions.Item label=\"Type\">{rocket.type}</Descriptions.Item>\n            <Descriptions.Item label=\"Active\">\n              {rocket.active.toString() === 'false' ? (\n                <Tag color=\"red\">{rocket.active.toString().toUpperCase()}</Tag>\n              ) : (\n                <Tag color=\"green\">{rocket.active.toString().toUpperCase()}</Tag>\n              )}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"First Flight\">{rocket.first_flight}</Descriptions.Item>\n            <Descriptions.Item label=\"Country\">{rocket.country}</Descriptions.Item>\n            <Descriptions.Item label=\"Company\">{rocket.company}</Descriptions.Item>\n            <Descriptions.Item label=\"Wikipedia\">{rocket.wikipedia}</Descriptions.Item>\n            <Descriptions.Item label=\"Cost per launch\">$ {rocket.cost_per_launch}</Descriptions.Item>\n            <Descriptions.Item label=\"Boosters\">{rocket.boosters}</Descriptions.Item>\n            <Descriptions.Item label=\"Stages\">{rocket.stages}</Descriptions.Item>\n            <Descriptions.Item label=\"Height\">\n              {Object.keys(rocket.height).map((key) => (\n                <>\n                  {key} : {rocket.height[key]}\n                  <br />\n                </>\n              ))}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Diameter\">\n              {Object.keys(rocket.diameter).map((key) => (\n                <>\n                  {key} : {rocket.diameter[key]}\n                  <br />\n                </>\n              ))}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Mass\">\n              {Object.keys(rocket.mass).map((key) => (\n                <>\n                  {key} : {rocket.mass[key]}\n                  <br />\n                </>\n              ))}\n            </Descriptions.Item>\n\n          </Descriptions>\n        </div>\n      )}\n    </BaseLayout>\n  )\n}\n","import React from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport { APP_ENDPOINT } from '../../../types'\nimport { CapsulesListPage, CrewListPage, CrewReadPage, HomePage, RocketReadPage, RocketsListPage } from '../../pages'\n\nexport const AppRouterProvider: React.FC = () => (\n  <HashRouter>\n    <Switch>\n      <Route exact path={`${APP_ENDPOINT.CREW}/:id`} component={CrewReadPage} />\n      <Route exact path={APP_ENDPOINT.CREW} component={CrewListPage} />\n      <Route exact path={APP_ENDPOINT.CAPSULES} component={CapsulesListPage} />\n      <Route exact path={`${APP_ENDPOINT.ROCKETS}/:id`} component={RocketReadPage} />\n      <Route exact path={APP_ENDPOINT.ROCKETS} component={RocketsListPage} />\n      <Route exact path=\"/\" component={HomePage} />\n    </Switch>\n  </HashRouter>\n)\n","import { configureStore } from '@reduxjs/toolkit'\nimport { combineReducers } from 'redux'\nimport {\n  capsulesListSlice,\n  companyDetailsSlice,\n  crewListSlice,\n  crewReadSlice,\n  errorsSlice,\n  rocketReadSlice,\n  rocketsListSlice\n} from './features'\n\nexport const store = configureStore({\n  reducer: combineReducers({\n    [errorsSlice.name]: errorsSlice.reducer,\n    [companyDetailsSlice.name]: companyDetailsSlice.reducer,\n    [crewListSlice.name]: crewListSlice.reducer,\n    [crewReadSlice.name]: crewReadSlice.reducer,\n    [capsulesListSlice.name]: capsulesListSlice.reducer,\n    [rocketsListSlice.name]: rocketsListSlice.reducer,\n    [rocketReadSlice.name]: rocketReadSlice.reducer\n  })\n})\n","import { Provider } from 'react-redux'\nimport React from 'react'\nimport { store } from '../../../store'\n\nexport const AppStoreProvider: React.FC = (props): React.ReactElement =>\n  <Provider store={store}>\n    {props.children}\n  </Provider>\n","import React from 'react'\nimport 'antd/dist/antd.css'\nimport { AppRouterProvider } from './providers/Router'\nimport { AppStoreProvider } from './providers/Store'\n\nexport const App: React.FC = () => {\n  return (\n    <AppStoreProvider>\n      <AppRouterProvider />\n    </AppStoreProvider>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './components/app/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}