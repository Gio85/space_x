{"version":3,"sources":["types/app.ts","types/index.ts","api/client/endpoints/shared/base.ts","api/client/endpoints/crew.ts","api/client/endpoints/company.ts","api/client/endpoints/capsules.ts","api/client/http/index.ts","api/client/index.ts","store/features/errors/errorsSlice.ts","store/features/companyDetailsSlice.ts","store/features/crewListSlice.ts","components/app/SideBar.tsx","components/shared/BaseLayout.tsx","components/pages/HomePage.tsx","components/pages/CrewList.tsx","store/features/crewReadSlice.ts","components/pages/CrewRead.tsx","store/features/capsulesListSlice.ts","components/pages/CapsulesList.tsx","components/app/providers/Router.tsx","store/index.ts","components/app/providers/Store.tsx","components/app/App.tsx","index.tsx"],"names":["HOST","API_ENDPOINT","APP_ENDPOINT","HTTP_METHOD","BaseEndpoint","client","path","id","this","get","CrewEndpoint","CREW","CompanyEndpoint","COMPANY","CapsulesEndpoint","CAPSULES","HttpClient","api","API","endpoint","parameters","Axios","params","getRequestConfig","then","data","catch","error","console","GET","headers","ApiClient","company","crew","capsules","instance","errorsSlice","createSlice","name","initialState","reducers","pushErrorAction","state","action","push","payload","showed","uuid","setErrorShowed","find","actions","defaultState","loading","companyDetailsSlice","loadingCompanyAction","isLoading","errorCompanyAction","message","setCompanyDetailsData","crewListSlice","loadingCrewListAction","errorCrewListAction","setCrewListData","SideBar","useState","collapsed","setCollapsed","Sider","collapsible","onCollapse","style","paddingTop","theme","mode","Item","icon","BarsOutlined","to","HOME","AndroidOutlined","RocketOutlined","ROCKETS","TeamOutlined","DingtalkOutlined","DRAGONS","ExpandOutlined","LANDPADS","ToTopOutlined","LAUNCHES","UploadOutlined","LAUNCHPADS","SubnodeOutlined","PAYLOADS","CarOutlined","ROADSTER","CompassOutlined","SHIPS","Header","Layout","Content","Footer","StyledHeader","styled","StyledLayout","StyledContent","StyledDiv","div","padding","minHeight","StyledFooter","BaseLayout","props","className","children","Title","Typography","HomePage","dispatch","useDispatch","useSelector","store","companyDetails","useEffect","a","factory","read","title","bordered","column","Object","keys","map","key","index","label","labelStyle","fontWeight","key1","Meta","Card","CrewListPage","crewList","list","gutter","justify","span","width","margin","hoverable","cover","alt","src","image","maxHeight","crewReadSlice","loadingCrewReadAction","errorCrewReadAction","setCrewReadData","CrewReadPage","useParams","crewMember","crewRead","fetchCrewReadThunk","height","bodyStyle","status","color","text","toUpperCase","agency","launches","type","href","wikipedia","target","LinkOutlined","capsulesListSlice","loadingCapsulesListAction","errorCapsulesListAction","setCapsulesListData","CapsulesList","capsulesList","rowKey","dataSource","size","Column","dataIndex","align","render","renderStatus","toLowerCase","AppRouterProvider","component","exact","configureStore","reducer","combineReducers","AppStoreProvider","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.825d7635.chunk.js","sourcesContent":["import { Action, ThunkAction } from '@reduxjs/toolkit'\nimport { ICompany } from './company'\nimport { ICrew } from './crew'\nimport { ICapsule } from './capsules'\n\nexport enum HOST {\n  API = 'https://api.spacexdata.com/v4'\n}\n\nexport enum API_ENDPOINT {\n  COMPANY = 'company',\n  CAPSULES= 'capsules',\n  ROCKETS = 'rockets',\n  CREW = 'crew',\n  DRAGONS = 'dragons',\n  LANDPADS = 'landpads',\n  LAUNCHES = 'launches',\n  LAUNCHPADS ='launchpads',\n  PAYLOADS = 'payloads',\n  ROADSTER = 'roadster',\n}\n\nexport enum APP_ENDPOINT {\n  HOME = '',\n  CAPSULES= 'capsules',\n  ROCKETS = 'rockets',\n  CREW = 'crew',\n  DRAGONS = 'dragons',\n  LANDPADS = 'landpads',\n  LAUNCHES = 'launches',\n  LAUNCHPADS ='launchpads',\n  PAYLOADS = 'payloads',\n  ROADSTER = 'roadster',\n  SHIPS = 'ships'\n}\n\nexport enum HTTP_METHOD {\n  POST = 'post',\n  GET = 'get',\n  PUT = 'put',\n  DELETE = 'delete',\n  PATCH = 'patch'\n}\n\nexport interface IHttpClient {\n  get<Output, Input = Record<string, unknown>>(path: string, payload?: Input): ApiResponse<Output>\n}\n\nexport type ApiResponse<T> = Promise<T>\n\nexport type IThunk = ThunkAction<void, IRootStore, unknown, Action<string>>\n\nexport interface IDataStore<T> {\n  loading: boolean\n  error: null | string\n  data: T | null\n}\n\nexport interface IRootStore {\n  companyDetails: IDataStore<ICompany>\n  crewList: IDataStore<ICrew[]>\n  crewRead: IDataStore<ICrew>\n  capsulesList: IDataStore<ICapsule>\n}","export * from './app'\nexport * from './company'\nexport * from './error'\nexport * from './crew'\nexport * from './capsules'","import { ApiResponse, IHttpClient } from '../../../../types'\n\nexport class BaseEndpoint<T> {\n  constructor(protected readonly client: IHttpClient) {}\n\n  public read(path: string, id?: string): ApiResponse<T> {\n    return this.client.get<T>(id ? `${path}/${id}` : path)\n  }\n\n  public list(path: string): ApiResponse<T[]> {\n    return this.client.get<T[]>(path)\n  }\n}\n","import { API_ENDPOINT, ApiResponse, ICrew } from '../../../types'\nimport { BaseEndpoint } from './shared/base'\nimport { HttpClient } from '../http'\n\nexport class CrewEndpoint extends BaseEndpoint<ICrew> {\n  public path = `${API_ENDPOINT.CREW}`\n  constructor(protected readonly client: HttpClient) {\n    super(client);\n  }\n\n  list(): ApiResponse<ICrew[]> {\n    return super.list(this.path)\n  }\n\n  read(id: string): ApiResponse<ICrew> {\n   return super.read(this.path, id)\n }\n}\n","import { API_ENDPOINT, ApiResponse, ICompany, IHttpClient } from '../../../types'\nimport { BaseEndpoint } from './shared/base'\n\nexport class CompanyEndpoint extends BaseEndpoint<ICompany>{\n  public path = `${API_ENDPOINT.COMPANY}`\n  constructor(protected readonly client: IHttpClient) {\n    super(client)\n  }\n\n  read(): ApiResponse<ICompany> {\n    return super.read(this.path)\n  }\n}\n","import { API_ENDPOINT, ApiResponse, ICapsule, IHttpClient } from '../../../types'\nimport { BaseEndpoint } from './shared/base'\n\nexport class CapsulesEndpoint extends BaseEndpoint<ICapsule>{\n  public path = `${API_ENDPOINT.CAPSULES}`\n  constructor(protected readonly client: IHttpClient) {\n    super(client)\n  }\n\n  list(): ApiResponse<ICapsule[]> {\n    return super.list(this.path)\n  }\n}\n","import Axios, { AxiosRequestConfig } from 'axios'\nimport { ApiResponse, HOST, HTTP_METHOD, IHttpClient } from '../../../types'\n\nexport class HttpClient implements IHttpClient {\n  protected api: string = HOST.API\n\n  public get<T>(endpoint: string, parameters?: unknown): ApiResponse<T> {\n    return Axios.get(`${this.api}/${endpoint}`, {\n      params: parameters || null,\n      ...this.getRequestConfig()\n    })\n      .then(({ data }) => data)\n      .catch((error) => console.error(error, endpoint, HTTP_METHOD.GET))\n  }\n\n  protected getRequestConfig(): AxiosRequestConfig {\n    return {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n  }\n}\n","import { CapsulesEndpoint, CompanyEndpoint, CrewEndpoint } from './endpoints'\nimport { HttpClient } from './http'\n\nexport class ApiClient {\n  public company: CompanyEndpoint\n  public crew: CrewEndpoint\n  public capsules: CapsulesEndpoint\n  protected client: HttpClient\n  private static instance: ApiClient\n\n  constructor() {\n    this.client = new HttpClient()\n    this.company = new CompanyEndpoint(this.client)\n    this.crew = new CrewEndpoint(this.client)\n    this.capsules = new CapsulesEndpoint(this.client)\n  }\n\n  public static factory(): ApiClient {\n    if (!this.instance) {\n      return (ApiClient.instance = new ApiClient())\n    }\n    return ApiClient.instance\n  }\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { v4 as uuid } from 'uuid'\nimport { IError } from '../../../types'\n\nexport const errorsSlice = createSlice({\n  name: 'errors',\n  initialState: [],\n  reducers: {\n    pushErrorAction: (state: IError[], action: PayloadAction<IError>) => {\n      state.push({ ...action.payload, showed: false, id: uuid() })\n    },\n    setErrorShowed: (state: IError[], action: PayloadAction<IError>) => {\n      const error = state.find(error => error.id === action.payload.id)\n      if (!error) {\n        return\n      }\n      error!.showed = true\n    }\n  }\n})\n\nexport const { pushErrorAction, setErrorShowed } = errorsSlice.actions","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { ICompany, IDataStore, IThunk } from '../../types'\nimport { ApiClient } from '../../api/client'\nimport { pushErrorAction } from './errors/errorsSlice'\n\nconst defaultState = {\n  loading: false,\n  error: null,\n  data: null\n}\n\nexport const companyDetailsSlice = createSlice({\n  name: 'companyDetails',\n  initialState: defaultState,\n  reducers: {\n    loadingCompanyAction: (state: IDataStore<ICompany>, action: PayloadAction<{ isLoading: boolean }>) => {\n      state.loading = action.payload.isLoading\n    },\n    errorCompanyAction: (state: IDataStore<ICompany>, action: PayloadAction<{ message: string }>) => {\n      state.loading = defaultState.loading\n      state.error = action.payload.message\n    },\n    setCompanyDetailsData: (state: IDataStore<ICompany>, action: PayloadAction<{ data: ICompany }>) => {\n      state.error = defaultState.error\n      state.loading = defaultState.loading\n      state.data = action.payload.data\n    }\n  }\n})\n\nexport const { errorCompanyAction, loadingCompanyAction, setCompanyDetailsData } = companyDetailsSlice.actions\nexport const fetchCompanyDetailsThunk = (): IThunk => async (dispatch) => {\n  try {\n    dispatch(loadingCompanyAction({ isLoading: true }))\n    const client = ApiClient.factory()\n    const data = await client.company.read()\n    dispatch(setCompanyDetailsData({ data }))\n  } catch (error) {\n    dispatch(\n      pushErrorAction({\n        title: 'There was a problem fetching company details data',\n        message: 'Fetching company details data error'\n      })\n    )\n    dispatch(errorCompanyAction({ message: error.message }))\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { IDataStore, IThunk } from '../../types'\nimport { ApiClient } from '../../api/client'\nimport { pushErrorAction } from './errors/errorsSlice'\nimport { ICrew } from '../../types/crew'\n\nconst defaultState = {\n  loading: false,\n  error: null,\n  data: null\n}\n\nexport const crewListSlice = createSlice({\n  name: 'crewList',\n  initialState: defaultState,\n  reducers: {\n    loadingCrewListAction: (state: IDataStore<ICrew>, action: PayloadAction<{ isLoading: boolean }>) => {\n      state.loading = action.payload.isLoading\n    },\n    errorCrewListAction: (state: IDataStore<ICrew>, action: PayloadAction<{ message: string }>) => {\n      state.loading = defaultState.loading\n      state.error = action.payload.message\n    },\n    setCrewListData: (state: IDataStore<ICrew[]>, action: PayloadAction<{ data: ICrew[] }>) => {\n      state.error = defaultState.error\n      state.loading = defaultState.loading\n      state.data = action.payload.data\n    }\n  }\n})\n\nexport const { errorCrewListAction, loadingCrewListAction, setCrewListData } = crewListSlice.actions\nexport const fetchCrewListThunk = (): IThunk => async (dispatch) => {\n  try {\n    dispatch(loadingCrewListAction({ isLoading: true }))\n    const client = ApiClient.factory()\n    const data = await client.crew.list()\n    dispatch(setCrewListData({ data }))\n  } catch (error) {\n    dispatch(\n      pushErrorAction({\n        title: 'There was a problem fetching crew list data',\n        message: 'Fetching crew list data error'\n      })\n    )\n    dispatch(errorCrewListAction({ message: error.message }))\n  }\n}\n","import React, { useState } from 'react'\nimport { Menu } from 'antd'\nimport {\n  AndroidOutlined,\n  BarsOutlined,\n  CarOutlined,\n  CompassOutlined,\n  DingtalkOutlined,\n  ExpandOutlined,\n  RocketOutlined,\n  SubnodeOutlined,\n  TeamOutlined,\n  ToTopOutlined,\n  UploadOutlined\n} from '@ant-design/icons'\nimport Sider from 'antd/es/layout/Sider'\nimport { Link } from 'react-router-dom'\nimport { APP_ENDPOINT } from '../../types'\n\nexport const SideBar: React.FC = () => {\n  const [collapsed, setCollapsed] = useState<boolean>(false)\n\n  return (\n    <Sider\n      collapsible\n      collapsed={collapsed}\n      onCollapse={(collapsed) => setCollapsed(collapsed)}\n      style={{ paddingTop: '10vh' }}\n    >\n      <Menu theme=\"dark\" mode=\"inline\">\n        <Menu.Item key=\"1\" icon={<BarsOutlined />}>\n          <Link to={APP_ENDPOINT.HOME}>Company Info</Link>\n        </Menu.Item>\n        <Menu.Item key=\"2\" icon={<AndroidOutlined />}>\n          <Link to={APP_ENDPOINT.CAPSULES}>Capsules</Link>\n        </Menu.Item>\n        <Menu.Item key=\"3\" icon={<RocketOutlined />}>\n          <Link to={APP_ENDPOINT.ROCKETS}>Rockets</Link>\n        </Menu.Item>\n        <Menu.Item key=\"4\" icon={<TeamOutlined />}>\n          <Link to={APP_ENDPOINT.CREW}>Crew</Link>\n        </Menu.Item>\n        <Menu.Item key=\"5\" icon={<DingtalkOutlined />}>\n          <Link to={APP_ENDPOINT.DRAGONS}>Dragons</Link>\n        </Menu.Item>\n        <Menu.Item key=\"6\" icon={<ExpandOutlined />}>\n          <Link to={APP_ENDPOINT.LANDPADS}>Landpads</Link>\n        </Menu.Item>\n        <Menu.Item key=\"7\" icon={<ToTopOutlined />}>\n          <Link to={APP_ENDPOINT.LAUNCHES}>Launches</Link>\n        </Menu.Item>\n        <Menu.Item key=\"8\" icon={<UploadOutlined />}>\n          <Link to={APP_ENDPOINT.LAUNCHPADS}>Launchpads</Link>\n        </Menu.Item>\n        <Menu.Item key=\"9\" icon={<SubnodeOutlined />}>\n          <Link to={APP_ENDPOINT.PAYLOADS}>Payloads</Link>\n        </Menu.Item>\n        <Menu.Item key=\"10\" icon={<CarOutlined />}>\n          <Link to={APP_ENDPOINT.ROADSTER}>Roadster Info</Link>\n        </Menu.Item>\n        <Menu.Item key=\"11\" icon={<CompassOutlined />}>\n          <Link to={APP_ENDPOINT.SHIPS}>Ships</Link>\n        </Menu.Item>\n      </Menu>\n    </Sider>\n  )\n}\n","import React from 'react'\nimport { Layout } from 'antd'\nimport 'antd/dist/antd.css'\nimport styled from '@emotion/styled'\nimport { SideBar } from '../app/SideBar'\n\nconst { Header, Content, Footer } = Layout\n\nconst StyledHeader = styled(Header)`\n  font-size: 20px;\n  color: white;\n  padding: 0 10px;\n`\n\nconst StyledLayout = styled(Layout)`\n  min-height: 100vh;\n`\n\nconst StyledContent = styled(Content)`\n  margin: 0 16px;\n`\n\nconst StyledDiv = styled.div({\n  padding: 24,\n  minHeight: 360\n})\n\nconst StyledFooter = styled(Footer)`\n  text-align: center;\n`\n\nexport const BaseLayout: React.FC = (props) => {\n  return (\n    <StyledLayout>\n      <SideBar />\n      <Layout className=\"site-layout\">\n        <StyledHeader className=\"site-layout-background\">SpaceX</StyledHeader>\n        <StyledContent>\n          <StyledDiv className=\"site-layout-background\">{props.children}</StyledDiv>\n        </StyledContent>\n        <StyledFooter>SpaceX created with Ant Design ©2018</StyledFooter>\n      </Layout>\n    </StyledLayout>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { IRootStore } from '../../types'\nimport { fetchCompanyDetailsThunk } from '../../store/features'\nimport { Descriptions, Typography } from 'antd'\nimport { BaseLayout } from '../shared/BaseLayout'\n\nconst { Title } = Typography\n\nexport const HomePage: React.FC = () => {\n  const dispatch = useDispatch()\n  const data = (useSelector((store: IRootStore) => store.companyDetails.data) as unknown) as Record<string, any>\n\n  useEffect(() => {\n    if (!data) {\n      dispatch(fetchCompanyDetailsThunk())\n    }\n  }, [data, dispatch])\n\n  return (\n    <BaseLayout>\n      {data && (\n        <div>\n          <Title>Company Details</Title>\n          <Descriptions bordered column={1}>\n            {Object.keys(data).map((key: string, index: number) => (\n              <Descriptions.Item key={index} label={key} labelStyle={{ fontWeight: 'bold' }}>\n                {typeof data[key] === 'object'\n                  ? Object.keys(data[key]).map((key1) => (\n                      <div key={key1}>\n                        <p>\n                          <span style={{ fontWeight: 'bold' }}>{key1}</span>: {data[key][key1]}\n                        </p>\n                        <br />\n                      </div>\n                    ))\n                  : data[key]}\n              </Descriptions.Item>\n            ))}\n          </Descriptions>\n        </div>\n      )}\n    </BaseLayout>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { APP_ENDPOINT, ICrew, IRootStore } from '../../types'\nimport { fetchCrewListThunk } from '../../store/features'\nimport { Card, Col, Row, Typography } from 'antd'\nimport { BaseLayout } from '../shared/BaseLayout'\nimport { Link } from 'react-router-dom'\n\nconst { Title } = Typography\nconst { Meta } = Card\n\nexport const CrewListPage: React.FC = () => {\n  const dispatch = useDispatch()\n  const data = (useSelector((store: IRootStore) => store.crewList.data) as unknown) as Record<string, any>\n\n  useEffect(() => {\n    if (!data) {\n      dispatch(fetchCrewListThunk())\n    }\n  }, [data, dispatch])\n\n  return (\n    <BaseLayout>\n      {data && (\n        <div>\n          <Title>Crew</Title>\n          <Row gutter={[16, 16]} justify=\"center\">\n            {data.map((crew: ICrew) => (\n              <Col key={crew.id} span={8}>\n                <div style={{ width: 240, margin: '0 auto'}}>\n                  <Link to={`${APP_ENDPOINT.CREW}/${crew.id}`}>\n                    <Card hoverable cover={<img alt=\"crew\" src={`${crew.image}`} style={{ maxHeight: 300 }} />}>\n                      <Meta title={`${crew.name}`} />\n                    </Card>\n                  </Link>\n                </div>\n              </Col>\n            ))}\n          </Row>\n        </div>\n      )}\n    </BaseLayout>\n  )\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { ICrew, IDataStore, IThunk } from '../../types'\nimport { ApiClient } from '../../api/client'\nimport { pushErrorAction } from './errors/errorsSlice'\n\nconst defaultState = {\n  loading: false,\n  error: null,\n  data: null\n}\n\nexport const crewReadSlice = createSlice({\n  name: 'crewRead',\n  initialState: defaultState,\n  reducers: {\n    loadingCrewReadAction: (state: IDataStore<ICrew>, action: PayloadAction<{ isLoading: boolean }>) => {\n      state.loading = action.payload.isLoading\n    },\n    errorCrewReadAction: (state: IDataStore<ICrew>, action: PayloadAction<{ message: string }>) => {\n      state.loading = defaultState.loading\n      state.error = action.payload.message\n    },\n    setCrewReadData: (state: IDataStore<ICrew>, action: PayloadAction<{ data: ICrew }>) => {\n      state.error = defaultState.error\n      state.loading = defaultState.loading\n      state.data = action.payload.data\n    }\n  }\n})\n\nexport const { errorCrewReadAction, loadingCrewReadAction, setCrewReadData } = crewReadSlice.actions\nexport const fetchCrewReadThunk = (id: string): IThunk => async (dispatch) => {\n  try {\n    dispatch(loadingCrewReadAction({ isLoading: true }))\n    const client = ApiClient.factory()\n    const data = await client.crew.read(id)\n    dispatch(setCrewReadData({ data }))\n  } catch (error) {\n    dispatch(\n      pushErrorAction({\n        title: 'There was a problem fetching crew read data',\n        message: 'Fetching crew read data error'\n      })\n    )\n    dispatch(errorCrewReadAction({ message: error.message }))\n  }\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { IRootStore } from '../../types'\nimport { Badge, Button, Card, Col, Descriptions, Row, Typography } from 'antd'\nimport { BaseLayout } from '../shared/BaseLayout'\nimport { useParams } from 'react-router-dom'\nimport { fetchCrewReadThunk } from '../../store/features/crewReadSlice'\nimport { LinkOutlined } from '@ant-design/icons'\n\nconst { Title } = Typography\n\nexport const CrewReadPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>()\n  const dispatch = useDispatch()\n  const crewMember = (useSelector((store: IRootStore) => store.crewRead.data) as unknown) as Record<string, any>\n\n  useEffect(() => {\n    if (!crewMember || id !== crewMember.id) {\n      dispatch(fetchCrewReadThunk(id))\n    }\n  }, [crewMember, dispatch])\n\n  return (\n    <BaseLayout>\n      {crewMember && (\n        <div>\n          <Title>{crewMember.name}</Title>\n          <Row gutter={16} justify=\"center\">\n            <Col span={12}>\n              <Card\n                style={{ width: 550 }}\n                cover={<img alt={`${crewMember.name}`} src={`${crewMember.image}`} style={{ height: 600 }} />}\n                bodyStyle={{ padding: 0 }}\n              />\n            </Col>\n            <Col span={12}>\n              <Descriptions bordered column={1}>\n                <Descriptions.Item label=\"Status\" labelStyle={{ fontWeight: 'bold' }}>\n                  {crewMember.status === 'active' ? (\n                    <Badge color=\"green\" status=\"processing\" text={crewMember.status.toUpperCase()} />\n                  ) : (\n                    <Badge color=\"red\" text={crewMember.status.toUpperCase()} />\n                  )}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"Agency\" labelStyle={{ fontWeight: 'bold' }}>\n                  {crewMember.agency}\n                </Descriptions.Item>\n                {/* TODO: make these clickable */}\n                <Descriptions.Item label=\"Launches\" labelStyle={{ fontWeight: 'bold' }}>\n                  {crewMember.launches}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"Wikipedia\" labelStyle={{ fontWeight: 'bold' }}>\n                  <Button type=\"link\" href={crewMember.wikipedia} target=\"_blank\">\n                    <LinkOutlined />\n                  </Button>\n                </Descriptions.Item>\n              </Descriptions>\n            </Col>\n          </Row>\n        </div>\n      )}\n    </BaseLayout>\n  )\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { ICapsule, IDataStore, IThunk } from '../../types'\nimport { ApiClient } from '../../api/client'\nimport { pushErrorAction } from './errors/errorsSlice'\n\nconst defaultState = {\n  loading: false,\n  error: null,\n  data: null\n}\n\nexport const capsulesListSlice = createSlice({\n  name: 'capsulesList',\n  initialState: defaultState,\n  reducers: {\n    loadingCapsulesListAction: (state: IDataStore<ICapsule>, action: PayloadAction<{ isLoading: boolean }>) => {\n      state.loading = action.payload.isLoading\n    },\n    errorCapsulesListAction: (state: IDataStore<ICapsule>, action: PayloadAction<{ message: string }>) => {\n      state.loading = defaultState.loading\n      state.error = action.payload.message\n    },\n    setCapsulesListData: (state: IDataStore<ICapsule[]>, action: PayloadAction<{ data: ICapsule[] }>) => {\n      state.error = defaultState.error\n      state.loading = defaultState.loading\n      state.data = action.payload.data\n    }\n  }\n})\n\nexport const { errorCapsulesListAction, loadingCapsulesListAction, setCapsulesListData } = capsulesListSlice.actions\nexport const fetchCapsulesListThunk = (): IThunk => async (dispatch) => {\n  try {\n    dispatch(loadingCapsulesListAction({ isLoading: true }))\n    const client = ApiClient.factory()\n    const data: ICapsule[] = await client.capsules.list()\n    dispatch(setCapsulesListData({ data }))\n  } catch (error) {\n    dispatch(\n      pushErrorAction({\n        title: 'There was a problem fetching capsules list data',\n        message: 'Fetching capsules list data error'\n      })\n    )\n    dispatch(errorCapsulesListAction({ message: error.message }))\n  }\n}\n","import React, { useEffect } from 'react'\nimport { BaseLayout } from '../shared/BaseLayout'\nimport { Table, Tag, Typography } from 'antd'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ICapsule, IRootStore } from '../../types'\nimport { fetchCapsulesListThunk } from '../../store/features/capsulesListSlice'\n\nconst { Title } = Typography\n\nexport const CapsulesList: React.FC = () => {\n  const dispatch = useDispatch()\n  const data = (useSelector((store: IRootStore) => store.capsulesList.data) as unknown) as ICapsule[]\n\n  useEffect(() => {\n    if (!data) {\n      dispatch(fetchCapsulesListThunk())\n    }\n  }, [data, dispatch])\n\n  return (\n    <BaseLayout>\n      <Title>Capsules</Title>\n      {data && (\n        <Table<ICapsule> rowKey=\"id\" dataSource={data} size=\"middle\" bordered>\n          <Table.Column<ICapsule> key=\"id\" title=\"ID\" dataIndex=\"id\" align=\"center\" />\n          <Table.Column<ICapsule> key=\"serial\" title=\"Serial\" dataIndex=\"serial\" align=\"center\" />\n          <Table.Column<ICapsule> key=\"type\" title=\"Type\" dataIndex=\"type\" align=\"center\" />\n          <Table.Column<ICapsule> key=\"water_landings\" title=\"Water Landings\" dataIndex=\"water_landings\" align=\"center\" />\n          <Table.Column<ICapsule> key=\"land_landings\" title=\"Land Landings\" dataIndex=\"land_landings\" align=\"center\" />\n          <Table.Column<ICapsule> key=\"last_update\" title=\"Last Update\" dataIndex=\"last_update\" align=\"center\" />\n          <Table.Column<ICapsule> key=\"reuse_count\" title=\"Reuse Count\" dataIndex=\"reuse_count\" align=\"center\" />\n          <Table.Column<ICapsule> key=\"status\" title=\"Status\" dataIndex=\"status\" render={renderStatus} align=\"center\" />\n        </Table>\n      )}\n    </BaseLayout>\n  )\n}\n\nfunction renderStatus(status: string) {\n  return status.toLowerCase() === 'retired' ? (\n    <Tag color={'purple'}>{status.toUpperCase()}</Tag>\n  ) : status.toLowerCase() === 'unknown' ? (\n    <Tag color={'blue'}>{status.toUpperCase()}</Tag>\n  ) : status.toLowerCase() === 'destroyed' ? (\n    <Tag color={'red'}>{status.toUpperCase()}</Tag>\n  ) : (\n    <Tag color={'green'}>{status.toUpperCase()}</Tag>\n  )\n}\n","import React from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport { HomePage } from '../../pages/HomePage'\nimport { APP_ENDPOINT } from '../../../types'\nimport { CrewListPage } from '../../pages/CrewList'\nimport { CrewReadPage } from '../../pages/CrewRead'\nimport { CapsulesList } from '../../pages/CapsulesList'\n\nexport const AppRouterProvider: React.FC = () => (\n  <HashRouter>\n    <Switch>\n      <Route path={`/${APP_ENDPOINT.CREW}/:id`} component={CrewReadPage} />\n      <Route path={`/${APP_ENDPOINT.CREW}`} component={CrewListPage} />\n      <Route path={`/${APP_ENDPOINT.CAPSULES}`} component={CapsulesList} />\n      <Route exact path={'/'} component={HomePage} />\n    </Switch>\n  </HashRouter>\n)\n","import { configureStore } from '@reduxjs/toolkit'\nimport { combineReducers } from 'redux'\nimport { companyDetailsSlice, crewListSlice, errorsSlice } from './features'\nimport { crewReadSlice } from './features/crewReadSlice'\nimport { capsulesListSlice } from './features/capsulesListSlice'\n\nexport const store = configureStore({\n  reducer: combineReducers({\n    [errorsSlice.name]: errorsSlice.reducer,\n    [companyDetailsSlice.name]: companyDetailsSlice.reducer,\n    [crewListSlice.name]: crewListSlice.reducer,\n    [crewReadSlice.name]: crewReadSlice.reducer,\n    [capsulesListSlice.name]: capsulesListSlice.reducer\n  })\n})\n","import { Provider } from 'react-redux'\nimport React from 'react'\nimport { store } from '../../../store'\n\nexport const AppStoreProvider: React.FC = (props): React.ReactElement =>\n  <Provider store={store}>\n    {props.children}\n  </Provider>\n","import React from 'react'\nimport 'antd/dist/antd.css'\nimport { AppRouterProvider } from './providers/Router'\nimport { AppStoreProvider } from './providers/Store'\n\nexport const App: React.FC = () => {\n  return (\n    <AppStoreProvider>\n      <AppRouterProvider />\n    </AppStoreProvider>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './components/app/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}